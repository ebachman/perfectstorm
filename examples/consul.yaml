- group:
    name: consul
    query:
      type:
        $in: [swarm-service, swarm-task]
      image:
        $regex: '^library/consul:'

- group:
    name: consul-servers
    query:
      type:
        $in: [swarm-service, swarm-task]
      image:
        $regex: '^library/consul:'
      snapshot.Spec.TaskTemplate.ContainerSpec.Args: '-server'

- group:
    name: consul-agents
    query:
      type:
        $in: [swarm-service, swarm-task]
      image:
        $regex: '^library/consul:'
      snapshot.Spec.TaskTemplate.ContainerSpec.Args:
        $regex: '^-retry-join(=|$)'

- application:
    name: consul
    components:
      - consul
      - consul-agents
      - consul-servers

- procedure:
    name: consul-server
    type: swarm
    content: |
      % set node = resources.filter({'type': 'swarm-node',
                                     'parent': target.id})|random

      - service create
          --name consul-server
          --network host
          --constraint "node.id=={{ node.snapshot.ID }}"
          -e 'CONSUL_LOCAL_CONFIG={"skip_leave_on_interrupt":true}'
          consul agent -server -bootstrap-expect=1 -bind="{{ node.snapshot.Status.Addr }}"

- procedure:
    name: consul-agents
    type: swarm
    content: |
      % set server_group = groups.get('consul-servers')
      % set server_task = server_group.members.filter({'type': 'swarm-task',
                                                       'status': 'running'})|first
      % set server_node = resources.get(server_task.snapshot.NodeID)

      % set nodes_with_consul = []
      % consul_tasks = groups.get('consul').members.filter({'type': 'swarm-task'})
      % for service in consul_tasks
      %   do nodes_with_consul.append(task.snapshot.NodeID)
      % endfor

      % set nodes_without_consul = resources.filter({'type': 'swarm-node',
                                                     'parent': target.id,
                                                     'snapshot.ID': {'$nin': nodes_with_consul}})

      % for node in nodes_without_consul
        - service create
            --name "consul-agent-{{ node.snapshot.ID }}"
            --network host
            --constraint "node.id=={{ node.snapshot.ID }}"
            -e 'CONSUL_LOCAL_CONFIG={"leave_on_terminate":true}'
            consul agent -bind="{{ node.snapshot.Status.Addr }}" -retry-join="{{ server_node.snapshot.Status.Addr }}"
      % endfor
