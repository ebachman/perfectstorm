#!/usr/bin/env python3

import argparse
import multiprocessing
import os

from gunicorn.app.base import BaseApplication


def address(addr):
    if ':' not in addr:
        host, port = addr, None
    else:
        host, port = addr.rsplit(':', 1)

        if ']' in port:
            # This is actually an IPv6 address.
            host, port = addr, None
        elif not port:
            # Port is empty, use the default.
            port = None
        else:
            port = int(port)

    if not host:
        raise ValueError(addr)

    return host, port


def parse_env_var(type, envvar, default):
    if os.environ.get(envvar):
        return type(os.environ[envvar])
    else:
        return default


def parse_args():
    parser = argparse.ArgumentParser(
        usage='%(prog)s [OPTIONS]',
        description='Perfect Storm Core API Server')

    parser.add_argument(
        '-b', '--bind', metavar='HOST[:PORT]', type=address, default=[], action='append',
        help='Address to bind. This can be an IPv4 address, and IPv6 address or a host name. The address can '
             'optionally include a port number. If no port is specified, the port specified with -p/--port is '
             'used, or the default port if -p/--port is not provided. This option can be specified multiple '
             'times to bind multiple addresses. Default: 127.0.0.1')
    parser.add_argument(
        '-p', '--port', metavar='PORT', type=int, default=28482, dest='default_port',
        help='Port to bind. See also -b/--bind. Default: 28482')
    parser.add_argument(
        '--mongo', metavar='HOST[:PORT]', type=address, default=None,
        help='MongoDB address. If port is not specified, the default port 27017 is used. Default: 127.0.0.1')

    parser.add_argument(
        '-D', '--debug', action='store_true',
        help='Enable debug mode')

    options = parser.parse_args()

    if not options.debug:
        options.debug = parse_env_var(bool, 'STORM_DEBUG', False)

    if not options.bind:
        options.bind.append(parse_env_var(address, 'STORM_BIND', ('127.0.0.1', None)))

    if not options.mongo:
        options.mongo = parse_env_var(address, 'STORM_MONGO', ('127.0.0.1', None))
    if not options.mongo[1]:
        options.mongo = (options.mongo[0], 27017)

    return options


class StormdApplication(BaseApplication):

    def __init__(self, options):
        self.options = options
        super().__init__()

    def load_config(self):
        bind = []

        for host, port in self.options.bind:
            if port is None:
                port = self.options.default_port
            bind.append('{}:{}'.format(host, port))

        self.cfg.set('bind', bind)

        if self.options.debug:
            self.cfg.set('loglevel', 'DEBUG')

        # Gunicorn recommends using (2 * cpu + 1) as the number of workers
        self.cfg.set('workers', multiprocessing.cpu_count() * 2 + 1)
        self.cfg.set('worker_class', 'gevent')

        # Use os.environ to pass settings to stormcore
        os.environ.update({
            'DJANGO_SETTINGS_MODULE': 'stormcore.settings',
            'STORM_DEBUG': '1' if self.options.debug else '',
            'STORM_MONGO': 'mongodb://{}:{}/perfectstorm'.format(
                *self.options.mongo),
        })

    def load(self):
        from stormcore.wsgi import application
        return application


def run():
    options = parse_args()
    StormdApplication(options).run()


if __name__ == '__main__':
    run()
