#!/usr/bin/env python3

import argparse
import curses
import logging
import multiprocessing
import os
import sys

from gunicorn import glogging
from gunicorn.app.base import BaseApplication


def address(addr):
    if ':' not in addr:
        host, port = addr, None
    else:
        host, port = addr.rsplit(':', 1)

        if ']' in port:
            # This is actually an IPv6 address.
            host, port = addr, None
        elif not port:
            # Port is empty, use the default.
            port = None
        else:
            port = int(port)

    if not host:
        raise ValueError(addr)

    return host, port


def parse_env_var(type, envvar, default):
    if os.environ.get(envvar):
        return type(os.environ[envvar])
    else:
        return default


def parse_args():
    parser = argparse.ArgumentParser(
        usage='%(prog)s [OPTIONS]',
        description='Perfect Storm Core API Server')

    parser.add_argument(
        '-b', '--bind', metavar='HOST[:PORT]', type=address, default=[], action='append',
        help='Address to bind. This can be an IPv4 address, and IPv6 address or a host name. The address can '
             'optionally include a port number. If no port is specified, the port specified with -p/--port is '
             'used, or the default port if -p/--port is not provided. This option can be specified multiple '
             'times to bind multiple addresses. Default: 127.0.0.1')
    parser.add_argument(
        '-p', '--port', metavar='PORT', type=int, default=28482, dest='default_port',
        help='Port to bind. See also -b/--bind. Default: 28482')
    parser.add_argument(
        '--mongo', metavar='HOST[:PORT]', type=address, default=None,
        help='MongoDB address. If port is not specified, the default port 27017 is used. Default: 127.0.0.1')

    parser.add_argument(
        '-D', '--debug', action='store_true',
        help='Enable debug mode')

    options = parser.parse_args()

    if not options.debug:
        options.debug = parse_env_var(bool, 'STORM_DEBUG', False)

    if not options.bind:
        options.bind.append(parse_env_var(address, 'STORM_BIND', ('127.0.0.1', None)))

    if not options.mongo:
        options.mongo = parse_env_var(address, 'STORM_MONGO', ('127.0.0.1', None))
    if not options.mongo[1]:
        options.mongo = (options.mongo[0], 27017)

    return options


def supports_colors(fp):
    try:
        if hasattr(fp, 'isatty') and hasattr(fp, 'fileno') and fp.isatty():
            curses.setupterm(fd=fp.fileno())
            if curses.tigetnum('colors') > 0:
                return True
    except Exception:
        pass
    return False


class StormdLogger(glogging.Logger):

    LOG_FORMAT = (
        '%(meta_color)s[%(levelname)1.1s %(asctime)s]%(no_color)s '
        '%(color)s%(message)s%(no_color)s')
    DATE_FORMAT = '%Y-%m-%d %H:%M:%S %z'

    def setup(self, cfg):
        self.loglevel = self.LOG_LEVELS.get(cfg.loglevel.lower(), logging.INFO)

        self.access_log.disabled = True
        self.error_log.setLevel(logging.ERROR)

        django_log = logging.getLogger('django')
        django_log.setLevel(logging.ERROR)

        stormcore_log = logging.getLogger('stormcore')
        stormcore_log.setLevel(self.loglevel)

        formatter = StormdLogFormatter(
            fmt=self.LOG_FORMAT,
            datefmt=self.DATE_FORMAT,
            colors=supports_colors(sys.stdout),
        )

        handler = logging.StreamHandler(stream=sys.stdout)
        handler.setFormatter(formatter)

        for logger in (
                self.access_log, self.error_log, django_log, stormcore_log):
            logger.addHandler(handler)


class StormdLogFormatter(logging.Formatter):

    COLOR_CODES = {
        'meta': 7,
        'DEBUG': 0,
        'INFO': 4,
        'WARNING': 3,
        'ERROR': 1,
        'CRITICAL': 1,
    }

    def __init__(self, colors=False, **kwargs):
        super().__init__(**kwargs)

        if colors:
            color_cap = (
                curses.tigetstr('setaf') or
                curses.tigetstr('setf') or
                b'')

            self._colors = {
                key: curses.tparm(color_cap, color_code).decode('ascii')
                for key, color_code in self.COLOR_CODES.items()
            }

            self._no_color = curses.tigetstr('sgr0').decode('ascii')
        else:
            self._colors = {
                key: '' for key in self.COLOR_CODES
            }
            self._no_color = ''

    def format(self, record):
        record.meta_color = self._colors['meta']
        record.color = self._colors[record.levelname]
        record.no_color = self._no_color
        return super().format(record)


class StormdApplication(BaseApplication):

    def __init__(self, options):
        self.options = options
        super().__init__()

    def load_config(self):
        # Bind addresses
        bind = []

        for host, port in self.options.bind:
            if port is None:
                port = self.options.default_port
            bind.append('{}:{}'.format(host, port))

        self.cfg.set('bind', bind)

        # Connection timeout
        self.cfg.set('timeout', 0)

        # Logging
        if self.options.debug:
            self.cfg.set('loglevel', 'DEBUG')
        self.cfg.set('logger_class', StormdLogger)

        self.cfg.set('when_ready', self.log_start)

        # Gunicorn recommends using (2 * cpu + 1) as the number of workers
        self.cfg.set('workers', multiprocessing.cpu_count() * 2 + 1)
        self.cfg.set('worker_class', 'gevent')

        # Use os.environ to pass settings to stormcore
        os.environ.update({
            'STORM_DEBUG': '1' if self.options.debug else '',
            'STORM_MONGO': 'mongodb://{}:{}/perfectstorm'.format(
                *self.options.mongo),
        })

    def load(self):
        from stormcore.wsgi import application
        return application

    # This needs to be a staticmethod or otherwise Gunicorn will complain
    # when calling cfg.set('when_ready', log_start)
    @staticmethod
    def log_start(server):
        logger = logging.getLogger('stormcore')
        addresses = ', '.join(
            str(listener) for listener in server.LISTENERS)
        logger.info('stormd version 0.1')
        logger.info('Listening at: %s', addresses)


def run():
    options = parse_args()
    StormdApplication(options).run()


if __name__ == '__main__':
    run()
