#!/usr/bin/env python3
# -*- coding: utf8 -*-

import abc
import argparse
import collections
import contextlib
import curses
import functools
import os
import re
import shlex
import shutil
import subprocess
import sys

import yaml

from stormlib import (
    Agent,
    Application,
    Group,
    Job,
    Procedure,
    Resource,
)
from stormlib.base import Model
from stormlib.cli import CommandLineClient


def _model_representer(dumper, obj):
    items = [(name, getattr(obj, name)) for name in obj._fields]
    return dumper.represent_dict(items)


yaml.add_multi_representer(Model, _model_representer)


def yaml_load(arg):
    return yaml.safe_load(arg)


class Terminal:

    COLORS = (
        'BLACK', 'RED', 'GREEN', 'YELLOW', 'BLUE', 'MAGENTA', 'CYAN', 'WHITE')

    def __init__(self, size=None, colors=None, pager=None):
        if size is None:
            size = shutil.get_terminal_size((-1, -1))
        self.size = size

        if colors is None:
            colors = self._supports_colors()
        self.has_colors = colors
        self.color_codes = self._color_codes()

        if pager is None:
            pager = self._supports_pager()
        self.has_pager = pager

    def _supports_colors(self):
        try:
            if (hasattr(sys.stdout, 'isatty') and
                    hasattr(sys.stdout, 'fileno') and
                    sys.stdout.isatty()):
                curses.setupterm(fd=sys.stdout.fileno())
                if curses.tigetnum('colors') > 0:
                    return True
        except Exception:
            pass
        return False

    def _color_codes(self):
        if not self.has_colors:
            color_codes = {color: '' for color in self.COLORS}
            color_codes['BOLD'] = color_codes['NORMAL'] = ''
        else:
            color_cap = (
                curses.tigetstr('setaf') or
                curses.tigetstr('setf') or
                b'')

            color_bytecodes = {
                color: curses.tparm(color_cap, color_num)
                for color_num, color in enumerate(self.COLORS)}

            color_bytecodes['BOLD'] = curses.tigetstr('bold')
            color_bytecodes['NORMAL'] = curses.tigetstr('sgr0')

            color_codes = {
                color: code.decode('ascii')
                for color, code in color_bytecodes.items()}

        return color_codes

    def _supports_pager(self):
        try:
            return sys.stdout.isatty()
        except Exception:
            return False

    def supports_chars(self, chars):
        try:
            chars.encode(sys.stdout.encoding)
        except Exception:
            return False
        return True

    def safestr(self, unicode_string, ascii_fallback):
        # Ensure that the ascii_fallback is really an ASCII string
        ascii_fallback.encode('ascii')

        if self.supports_chars(unicode_string):
            return unicode_string
        else:
            return ascii_fallback

    @contextlib.contextmanager
    def pager(self):
        if not self.has_pager:
            yield
            return

        args = shlex.split(os.environ.get('PAGER', 'less'))

        env = os.environ.copy()
        env.setdefault('LESS', 'FRX')

        with subprocess.Popen(
                args, env=env, stdin=subprocess.PIPE,
                stdout=sys.stdout, stderr=sys.stderr,
                universal_newlines=True) as proc:
            orig_stdout = sys.stdout
            sys.stdout = proc.stdin

            try:
                yield proc
            finally:
                sys.stdout = orig_stdout


class ColoredString:

    def __init__(self, s, color=None, bold=False):
        self.s = str(s)
        self.color = color
        self.bold = bold

    @classmethod
    def _wrap_string(cls, s, color, bold):
        if '\n' in s:
            # If the string contains multiple lines, color each line
            # individually, otherwise the pager might color only the
            # first line
            return '\n'.join(
                cls._wrap_string(line, color, bold)
                for line in s.split('\n'))

        color_codes = terminal.color_codes

        return ''.join((
            color_codes['BOLD'] if bold else '',
            color_codes[color] if color is not None else '',
            s,
            color_codes['NORMAL'],
        ))

    def __str__(self):
        return self._wrap_string(self.s, self.color, self.bold)

    def __format__(self, format_spec):
        s = format(self.s, format_spec)
        return self._wrap_string(s, self.color, self.bold)

    def __getitem__(self, index):
        return self.__class__(self.s[index], self.color, self.bold)

    def __add__(self, other):
        if not isinstance(other, str):
            return NotImplementedError
        return self.__class__(self.s + other, self.color, self.bold)

    def __len__(self):
        return len(self.s)

    def __repr__(self):
        return '{}({!r}, color={!r}, bold={!r})'.format(
            self.__class__.__name__, self.s, self.color, self.bold)


def print_yaml(obj):
    document = yaml.dump(obj, default_flow_style=False)

    with terminal.pager():
        if not terminal.has_colors:
            sys.stdout.write(document)
            return

        last_token = None
        last_token_end = None

        for token in yaml.scan(document):
            token_start = token.start_mark.index
            token_end = token.end_mark.index

            # Whitespace
            sys.stdout.write(document[last_token_end:token_start])

            # Token with formatting
            if isinstance(token, yaml.ScalarToken):
                if isinstance(last_token, yaml.KeyToken):
                    color = 'BLUE'
                else:
                    color = 'RED'
            else:
                color = None

            sys.stdout.write(str(ColoredString(
                document[token_start:token_end], color=color)))

            last_token = token
            last_token_end = token_end


def get_object_id(obj):
    return str(obj.id)


def get_object_type(obj):
    return ColoredString(obj.type, color='CYAN')


def get_object_name(obj):
    if getattr(obj, 'name', None):
        name = obj.name
    elif getattr(obj, 'names', None):
        name = obj.names
    else:
        name = ''

    if isinstance(name, list):
        name = ', '.join(str(item) for item in name)

    return ColoredString(name, color='BLUE')


def get_object_status(obj):
    status = obj.status or 'unknown'

    status2color = {
        'created': 'MAGENTA',
        'error': 'RED',
        'offline': 'WHITE',
        'online': 'GREEN',
        'running': 'GREEN',
        'stopped': 'MAGENTA',
        'unknown': 'WHITE',
        'updated': 'MAGENTA',
    }

    return ColoredString(status, status2color.get(status, 'YELLOW'))


def get_object_health(obj):
    health = obj.health or 'unknown'

    health2color = {
        'healthy': 'GREEN',
        'unhealthy': 'RED',
        'unknown': 'WHITE',
    }

    return ColoredString(health, health2color.get(health, 'YELLOW'))


def print_table(cols, rows, truncate=None):
    cols = list(cols)
    rows = list(rows)

    col_separator = '   '

    # Compute the length of all the columns
    columns_len = [len(column) for column in cols]
    for row in rows:
        for i, value in enumerate(row):
            columns_len[i] = max(columns_len[i], len(value))

    # Truncate a column if needed
    if truncate is not None and terminal.size.columns > 0:
        row_length = (
            sum(columns_len) + len(col_separator) * (len(cols) - 1))
        term_length = terminal.size.columns

        if row_length > term_length:
            ellipsis = terminal.safestr('…', '...')

            i = cols.index(truncate)
            excess = row_length - term_length

            columns_len[i] = max(
                len(truncate), len(ellipsis), columns_len[i] - excess)
            new_len = columns_len[i] - len(ellipsis)

            for row in rows:
                if len(row[i]) > columns_len[i]:
                    row[i] = row[i][:new_len] + ellipsis

    # Format and print the rows/columns
    row_format = col_separator.join(
        '{: <%d}' % size for size in columns_len)

    table = [[ColoredString(column, bold=True) for column in cols]]
    table += rows

    with terminal.pager():
        for row in table:
            print(row_format.format(*row))


class TreeNode(collections.namedtuple('BaseTreeNode', 'values children')):

    def __new__(cls, values=(), children=()):
        return super().__new__(cls, list(values), list(children))


def format_tree_branch(node, indent='', last=False):
    line = [''.join((
        indent,
        terminal.safestr('╰─', '`-') if last
        else terminal.safestr('├─', '|-'),
        node.values[0],
    ))]
    line += node.values[1:]
    yield line

    if node.children:
        indent += '  ' if last else terminal.safestr('│ ', '| ')
        for c in node.children[:-1]:
            yield from format_tree_branch(c, indent)
        yield from format_tree_branch(node.children[-1], indent, True)


def format_tree(nodes):
    for n in nodes:
        yield n.values
        if n.children:
            for c in n.children[:-1]:
                yield from format_tree_branch(c)
            yield from format_tree_branch(n.children[-1], last=True)


class Command(metaclass=abc.ABCMeta):

    @property
    @abc.abstractmethod
    def command_name(self):
        raise NotImplementedError

    def add_arguments(self, parser):
        pass


class TopLevelCommand(Command):

    @abc.abstractmethod
    def __call__(self, client):
        raise NotImplementedError


class EntityCommand(Command):

    @abc.abstractmethod
    def __call__(self, client, model):
        raise NotImplementedError

    def get_queryset(self, client, model):
        return model.objects.all()


class SingleEntityCommand(EntityCommand):

    def add_arguments(self, parser):
        super().add_arguments(parser)
        parser.add_argument('id')

    def get_object(self, client, model):
        return model.objects.get(client.options.id)


class MultipleEntitiesCommand(EntityCommand):

    def add_arguments(self, parser):
        super().add_arguments(parser)
        parser.add_argument('id', nargs='+')

    def iter_objects(self, client, model):
        for item in client.options.id:
            yield model.objects.get(item)


class EntityImporter:

    def __call__(self, client, data, model):
        if 'id' not in data and 'name' in data:
            data = {'id': data['name'], **data}
        model(**data).save()


class EntityListCommand(EntityCommand):

    command_name = 'ls'

    def __init__(self, columns, truncate=None, **kwargs):
        super().__init__(**kwargs)
        self.columns = columns
        self.truncate = truncate

    def add_arguments(self, parser):
        super().add_arguments(parser)
        parser.add_argument('-q', '--quiet', action='store_true')

    def __call__(self, client, model):
        qs = self.get_queryset(client, model)

        if client.options.quiet:
            self.list_quiet(qs)
        else:
            self.list_verbose(qs)

    def list_quiet(self, queryset):
        for obj in queryset:
            print(get_object_id(obj))

    def list_verbose(self, queryset):
        header = [column_name for column_name, getter in self.columns]
        rows = [
            [getter(obj) for column_name, getter in self.columns]
            for obj in queryset
        ]
        print_table(header, rows, truncate=self.truncate)


class EntityListTreeCommand(EntityListCommand):

    def create_tree(self, queryset):
        root_nodes = []
        id2node = collections.defaultdict(TreeNode)

        for obj in queryset:
            node = id2node[obj.id]
            node.values.extend(
                getter(obj) for column_name, getter in self.columns)

            if obj.parent is None:
                root_nodes.append(node)
            else:
                parent_node = id2node[obj.parent]
                parent_node.children.append(node)

        return root_nodes

    def list_verbose(self, queryset):
        header = [column_name for column_name, getter in self.columns]
        tree_nodes = self.create_tree(queryset)
        rows = format_tree(tree_nodes)
        print_table(header, rows, truncate=self.truncate)


class ResourceListCommand(EntityListTreeCommand):

    def __init__(self, *args, **kwargs):
        columns = [
            ('ID', get_object_id),
            ('TYPE', get_object_type),
            ('NAMES', get_object_name),
            ('STATUS', get_object_status),
            ('HEALTH', get_object_health),
        ]
        super().__init__(*args, columns=columns, truncate='NAMES', **kwargs)


class ListGroupMembersCommand(ResourceListCommand, SingleEntityCommand):

    command_name = 'members'

    def get_queryset(self, client, model):
        obj = self.get_object(client, model)
        return obj.members()


class EntityGetCommand(SingleEntityCommand):

    command_name = 'get'

    def __call__(self, client, model):
        obj = self.get_object(client, model)
        print_yaml(obj)


class EntityRemoveCommand(MultipleEntitiesCommand):

    command_name = 'rm'

    def __call__(self, client, model):
        for obj in self.iter_objects(client, model):
            obj.delete()


class EntityHandler(metaclass=abc.ABCMeta):

    importer = None

    @property
    @abc.abstractmethod
    def model(self):
        raise NotImplementedError

    @property
    @abc.abstractmethod
    def entity_name(self):
        raise NotImplementedError

    @property
    @abc.abstractmethod
    def commands(self):
        raise NotImplementedError

    def add_arguments(self, parser):
        subparsers = parser.add_subparsers(dest='command')
        for command in self.commands:
            command_parser = subparsers.add_parser(command.command_name)
            command_parser.set_defaults(
                command=functools.partial(command, model=self.model))
            command.add_arguments(command_parser)


class ImportCommand(TopLevelCommand):

    command_name = 'import'

    def add_arguments(self, parser):
        super().add_arguments(parser)
        parser.add_argument(
            '-f', '--file', type=argparse.FileType(), required=True)

    def __call__(self, client):
        with client.options.file as fp:
            document = yaml_load(fp)

        if isinstance(document, list):
            self.import_all(client, document)
        else:
            self.import_one(client, document)

    def import_all(self, client, lst):
        for item in lst:
            self.import_one(client, item)

    def import_one(self, client, spec):
        if not isinstance(spec, dict):
            raise TypeError(type(spec).__name__)
        if not spec:
            raise ValueError('Empty specification')
        if len(spec) > 1:
            raise ValueError('Too many items')

        entity_name, = spec
        entity_spec = spec[entity_name]

        for entity_handler in client.entity_handlers:
            if (entity_handler.entity_name == entity_name and
                    entity_handler.importer is not None):
                entity_handler.importer(
                    client, data=entity_spec, model=entity_handler.model)
                return

        raise ValueError(entity_name)


class ApplicationImporter(EntityImporter):

    _component_link_re = re.compile(
        r"""
        ^\s*
        ([\w._-]+)                  # Source component
        (?:
            \s*=>\s*                # Arrow (=>)
            ([\w._-]+)\s*           # Destination component
            \[\s*([\w._-]+)\s*\]    # Destination service
        )?
        \s*$
        """,
        re.VERBOSE)

    _exposed_service_re = re.compile(
        r"""
        ^\s*
        ([\w._-]+)\s*           # Component
        \[\s*([\w._-]+)\s*\]    # Service
        \s*$
        """,
        re.VERBOSE)

    def __call__(self, client, data, model):
        api_data = self.parse(data)
        super().__call__(client, api_data, model)

    def parse(self, data):
        result = {}

        if 'name' in data:
            result['name'] = data['name']

        if 'components' in data:
            components = set()
            links = []

            for link_spec in data['components']:
                src_component, dest_component, dest_service = (
                    self.parse_component_link(link_spec))
                components.add(src_component)
                if dest_component:
                    components.add(dest_component)
                    links.append({
                        'src_component': src_component,
                        'dest_component': dest_component,
                        'dest_service': dest_service,
                    })

            result['components'] = list(components)
            result['links'] = links

        if 'expose' in data:
            expose = []

            for service_spec in data['expose']:
                component, service = self.parse_exposed_service(service_spec)
                expose.append({'component': component, 'service': service})

            result['expose'] = expose

        return result

    def parse_component_link(self, link_spec):
        return self._component_link_re.match(link_spec).groups()

    def parse_exposed_service(self, service_spec):
        return self._exposed_service_re.match(service_spec).groups()


class AgentHandler(EntityHandler):

    model = Agent
    entity_name = 'agent'

    commands = [
        EntityListCommand([
            ('ID', get_object_id),
            ('TYPE', get_object_type),
            ('NAME', get_object_name),
            ('STATUS', get_object_status),
        ]),
        EntityGetCommand(),
        EntityRemoveCommand(),
    ]


class ApplicationHandler(EntityHandler):

    model = Application
    entity_name = 'application'

    commands = [
        EntityListCommand([
            ('ID', get_object_id),
            ('NAME', get_object_name),
        ]),
        EntityGetCommand(),
        EntityRemoveCommand(),
    ]

    importer = ApplicationImporter()


class GroupHandler(EntityHandler):

    model = Group
    entity_name = 'group'

    commands = [
        EntityListCommand([
            ('ID', get_object_id),
            ('NAME', get_object_name),
        ]),
        EntityGetCommand(),
        ListGroupMembersCommand(),
        EntityRemoveCommand(),
    ]

    importer = EntityImporter()


class ProcedureExecCommand(SingleEntityCommand):

    command_name = 'exec'

    def add_arguments(self, parser):
        super().add_arguments(parser)

        parser.add_argument('-d', '--detach', action='store_true')
        parser.add_argument('-k', '--keep', action='store_true')

        parser.add_argument('-t', '--target')

        parser.add_argument(
            '-o', '--option', dest='options',
            type=self._parse_job_arg, action='append', default=[])
        parser.add_argument(
            '-p', '--param', dest='params',
            type=self._parse_job_arg, action='append', default=[])

    def _parse_job_arg(self, arg):
        parts = arg.split('=', 1)
        if len(parts) == 1:
            key = arg
            value = True
        else:
            key, value = parts
            value = yaml_load(value)
        return key, value

    def __call__(self, client, model):
        procedure = self.get_object(client, model)

        job = procedure.exec(
            target=client.options.target,
            options=dict(client.options.options),
            params=dict(client.options.params),
        )

        if not client.options.detach:
            job.wait(delete=not client.options.keep)


class ProcedureHandler(EntityHandler):

    model = Procedure
    entity_name = 'procedure'

    commands = [
        EntityListCommand([
            ('ID', get_object_id),
            ('TYPE', get_object_type),
            ('NAME', get_object_name),
        ]),
        EntityGetCommand(),
        EntityRemoveCommand(),
        ProcedureExecCommand(),
    ]

    importer = EntityImporter()


class ResourceHandler(EntityHandler):

    model = Resource
    entity_name = 'resource'

    commands = [
        ResourceListCommand(),
        EntityGetCommand(),
    ]


class JobHandler(EntityHandler):

    model = Job
    entity_name = 'job'

    commands = [
        EntityListCommand([
            ('ID', get_object_id),
            ('TYPE', get_object_type),
            ('STATUS', get_object_status),
        ]),
        EntityGetCommand(),
        EntityRemoveCommand(),
    ]


class StormCtl(CommandLineClient):

    top_level_commands = [
        ImportCommand(),
    ]

    entity_handlers = [
        AgentHandler(),
        ApplicationHandler(),
        GroupHandler(),
        ProcedureHandler(),
        ResourceHandler(),
        JobHandler(),
    ]

    def add_arguments(self, parser):
        super().add_arguments(parser)

        subparsers = parser.add_subparsers(dest='command')

        for command in self.top_level_commands:
            command_parser = subparsers.add_parser(command.command_name)
            command_parser.set_defaults(command=command)
            command.add_arguments(command_parser)

        for entity in self.entity_handlers:
            entity_parser = subparsers.add_parser(entity.entity_name)
            entity_parser.set_defaults(entity=entity)
            entity.add_arguments(entity_parser)

    def run(self):
        global terminal
        terminal = Terminal()
        command = self.options.command
        command(self)


if __name__ == '__main__':
    StormCtl().main()
