#!/usr/bin/env python3
# Copyright (c) 2017, Composure.ai
# Copyright (c) 2018, Andrea Corbellini
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies,
# either expressed or implied, of the Perfect Storm Project.

import collections
import re
import shlex
import subprocess

import yaml

import requests_unixsocket

from perfectstorm import Resource
from perfectstorm.cli import DaemonClient, ExecutorClient
from perfectstorm.executors import DiscoveryExecutor, RecipeExecutor


_var_re = re.compile(r'(?<!\$)\$(\w+|{[^}]*})')

DockerSnapshot = collections.namedtuple('DockerSnapshot', 'info containers')


class DockerCommand:

    def __init__(self, args):
        err = False

        if isinstance(args, str):
            var = None
            args = shlex.split(args)
        elif isinstance(args, list):
            var = None
        elif isinstance(args, dict):
            if len(args) == 1:
                var, args = args.popitem()
            else:
                err = True
        else:
            err = True

        if not err:
            if var is not None and not isinstance(var, str):
                err = True
            if not all(isinstance(arg, str) for arg in args):
                err = True

        if err:
            raise TypeError('args must be a string, a list of strings or a dictionary containing a single item')

        if len(args) < 1:
            raise ValueError('Empty command')

        self.var = var
        self.cmd = args[0]
        self.args = args[1:]

    def expand_args(self, environ):
        expanded_args = []

        for arg in self.args:
            expanded = ''

            while arg:
                match = _var_re.search(arg)
                if match is None:
                    expanded += arg
                    break
                start, end = match.span()
                expanded += arg[:start]
                var = match.group(1)
                if var[0] == '{':
                    var = var[1:-1]
                expanded += environ.get(var, '')
                arg = arg[end+1:]

            expanded_args.append(expanded)

        return expanded_args

    def run(self, environ=None):
        if environ is None:
            environ = {}

        args = ['docker', self.cmd] + self.expand_args(self.args)
        process = subprocess.run(args, input=b'', check=True, stdout=subprocess.PIPE)
        output = process.stdout.decode().strip()

        if self.var is not None:
            environ[self.var] = output

        return output


class DockerRecipeExecutor(RecipeExecutor):

    agent_type = 'docker-deployer'

    def before_run(self):
        super().before_run()

        cmd = DockerCommand(['info'])
        info = cmd.run()

        docker_id = None
        for line in info.splitlines():
            if line.startswith('ID: '):
                docker_id = line[4:]

        if docker_id is None:
            raise RuntimeError('Could not find Docker daemon ID')

        self.docker_id = docker_id

    def get_pending_triggers(self):
        qs = super().get_pending_triggers()
        qs.filter(target=self.docker_id)
        return qs

    def get_recipe(self, trigger):
        recipe = super().get_recipe(trigger)
        commands = yaml.safe_load(recipe.content)
        if not isinstance(commands, list):
            raise TypeError('Recipe content is expected to be a list of commands')
        self.commands = [DockerCommand(item) for item in commands]
        return recipe

    def run_recipe(self, recipe):
        environ = dict(recipe.params)
        for command in self.commands:
            command.run(environ)


class DockerDiscoveryExecutor(DiscoveryExecutor):

    agent_type = 'docker-discovery'

    _url_prefix = 'http+unix://%2Fvar%2Frun%2Fdocker.sock/'

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self._session = requests_unixsocket.Session()

    def _get_json(self, path):
        url = '/'.join((self._url_prefix.rstrip('/'), path.lstrip('/')))
        response = self._session.get(url)
        response.raise_for_status()
        return response.json()

    @property
    def docker_host_id(self):
        return self.snapshot.info['ID']

    def take_current_snapshot(self):
        info = self._get_json('/info')
        del info['SystemTime']

        containers = self._get_json('/containers/json?all=1')
        containers = {data['Id']: data for data in containers}

        return DockerSnapshot(info, containers)

    def take_stored_snapshot(self):
        info = None
        containers = {}

        for resource in Resource.objects.all():
            if self.docker_host_id in resource.names:
                info = resource.snapshot
            elif resource.host == self.docker_host_id:
                containers[resource.id] = resource.snapshot

        return DockerSnapshot(info, containers)

    def compare_snapshots(self, prev, curr):
        created = []
        updated = []
        deleted = []

        if prev is None:
            # First run
            created.append(('info', curr.info))
            created.extend(('container', container) for container in curr.containers.values())
        else:
            # Compare info
            if prev.info != curr.info:
                updated.append(('info', curr.info))

            # Compare containers
            prev_containers = set(prev.containers)
            curr_containers = set(curr.containers)

            created_containers = curr_containers.difference(prev_containers)
            deleted_containers = prev_containers.difference(curr_containers)
            common_containers = prev_containers & curr_containers

            created.extend(('container', curr.containers[container_id]) for container_id in created_containers)
            deleted.extend(('container', prev.containers[container_id]) for container_id in deleted_containers)

            for container_id in common_containers:
                prev_container = prev.containers[container_id]
                curr_container = curr.containers[container_id]

                if prev_container != curr_container:
                    updated.append(('container', curr_container))

        # Return differences
        return created, updated, deleted

    def create_resource(self, resource_data):
        self.save_resource(resource_data)

    def update_resource(self, resource_data):
        self.save_resource(resource_data)

    def save_resource(self, resource_data):
        resource_type, resource_data = resource_data

        if resource_type == 'info':
            self.save_docker_info(resource_data)
        elif resource_type == 'container':
            self.save_container(resource_data)
        else:
            raise AssertionError(resource_type)

    def save_docker_info(self, data):
        names = [data['ID'], data['Name']]

        resource = Resource(
            type='docker-daemon',
            names=names,
            owner=self.agent.id,
            snapshot=data,
        )

        resource.save()

    def save_container(self, data):
        names = [data['Id']]
        names.extend(name.lstrip('/') for name in data['Names'])

        resource = Resource(
            type='container',
            names=names,
            owner=self.agent.id,
            image=data['Image'],
            host=self.snapshot.info['ID'],
            snapshot=data,
        )

        resource.save()

    def delete_resource(self, resource_data):
        resource_type, resource_data = resource_data
        assert resource_type == 'container'
        Resource(names=resource_data['Id']).delete()


class DockerDeployerClient(ExecutorClient):

    agent_type = 'docker'

    def get_executors(self):
        return [
            DockerDiscoveryExecutor(self.agent),
            DockerRecipeExecutor(self.agent),
        ]


if __name__ == '__main__':
    DockerDeployerClient.main()
