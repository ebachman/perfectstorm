#!/usr/bin/env python3
# Copyright (c) 2018, Andrea Corbellini
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies,
# either expressed or implied, of the Perfect Storm Project.

import collections

import requests_unixsocket

from perfectstorm.clients.discovery import DiscoveryExecutor


DockerSnapshot = collections.namedtuple('DockerSnapshot', 'info containers')


class DockerDiscoveryDaemon(DiscoveryExecutor):

    _url_prefix = 'http+unix://%2Fvar%2Frun%2Fdocker.sock/'

    def __init__(self, *args, **kwargs):
        self._session = requests_unixsocket.Session()
        super().__init__(*args, **kwargs)

    def _get_json(self, path):
        url = '/'.join((self._url_prefix.rstrip('/'), path.lstrip('/')))
        response = self._session.get(url)
        response.raise_for_status()
        return response.json()

    @property
    def docker_host_id(self):
        return self.snapshot.info['ID']

    def take_current_snapshot(self):
        info = self._get_json('/info')
        del info['SystemTime']

        containers = self._get_json('/containers/json?all=1')
        containers = {data['Id']: data for data in containers}

        return DockerSnapshot(info, containers)

    def take_stored_snapshot(self):
        info = None
        containers = {}

        for resource in self.api.resources.all():
            if self.docker_host_id in resource['names']:
                info = resource['snapshot']
            elif resource['host'] == self.docker_host_id:
                containers[resource['names'][0]] = resource['snapshot']

        return DockerSnapshot(info, containers)

    def compare_snapshots(self, prev, curr):
        created = []
        updated = []
        deleted = []

        if prev is None:
            # First run
            created.append(('info', curr.info))
            created.extend(('container', container) for container in curr.containers.values())
        else:
            # Compare info
            if prev.info != curr.info:
                updated.append(('info', curr.info))

            # Compare containers
            prev_containers = set(prev.containers)
            curr_containers = set(curr.containers)

            created_containers = curr_containers.difference(prev_containers)
            deleted_containers = prev_containers.difference(curr_containers)
            common_containers = prev_containers & curr_containers

            created.extend(('container', curr.containers[container_id]) for container_id in created_containers)
            deleted.extend(('container', prev.containers[container_id]) for container_id in deleted_containers)

            for container_id in common_containers:
                prev_container = prev.containers[container_id]
                curr_container = curr.containers[container_id]

                if prev_container != curr_container:
                    updated.append(('container', curr_container))

        # Return differences
        return created, updated, deleted

    def create_resource(self, resource):
        self.save_resource(resource)

    def update_resource(self, resource):
        self.save_resource(resource)

    def save_resource(self, resource):
        resource_type, data = resource

        if resource_type == 'info':
            self.save_docker_info(data)
        elif resource_type == 'container':
            self.save_container(data)
        else:
            raise AssertionError(resource_type)

    def save_docker_info(self, data):
        names = [data['ID'], data['Name']]

        self.api.resources.update_or_create(
            names[0],
            {
                'type': 'host',
                'names': names,
                'snapshot': data,
            },
        )

    def save_container(self, data):
        names = [data['Id']]
        names.extend(name.lstrip('/') for name in data['Names'])

        self.api.resources.update_or_create(
            names[0],
            {
                'type': 'container',
                'names': names,
                'image': data['Image'],
                'host': self.snapshot.info['ID'],
                'snapshot': data,
            },
        )

    def delete_resource(self, resource):
        resource_type, data = resource
        assert resource_type == 'container'
        self.api.resources.get(data['Id']).delete()


if __name__ == '__main__':
    DockerDiscoveryDaemon().main()
